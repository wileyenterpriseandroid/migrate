<?xml version='1.0' encoding='UTF-8'?>

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="migrate" default="compile" basedir=".">

    <property file="build.properties"/>
    <property file="src/jdbc.properties"/>

    <property name="migrate" value="migrate"/>
    <property name="migrate.path" value="/${migrate}"/>
    <property name="migrate.version" value="1.0"/>
    <property name="build.home" value="${basedir}/build"/>
    <property name="build.web-inf.classes" value="${build.home}/WEB-INF/classes"/>
    <property name="src.home" value="src"/>
    <property name="web.home" value="WebContent"/>
    <property name="dist.home" value="${basedir}/dist"/>
    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="true"/>
    <property name="ivy.install.version" value="2.3.0-rc1"/>
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="true"/>
    <property name="tools.eclipse" value="${basedir}/tools/ide/eclipse" />

    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!--
        download Ivy from web site so that it can be used even without any special installation
        -->
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!--
         try to load ivy here from local ivy dir, in case the user has not already dropped it into
         ant's lib dir (note that the latter copy will always take precedence). We will not fail as
         long as local lib dir exists (it may be empty) and ivy is in at least one of ant's lib dir
         or the local lib dir.
        -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <!-- ==================== resolve ivy dependencies Target ================================== -->
    <target name="resolve" description="--> resolve ivy dependencies">
        <property name="ivy.dep.file" value="${basedir}/ivy.xml" />
        <property name="ivy.lib.dir" value="${build.home}/WEB-INF/lib" />
        <ivy:retrieve />
    </target>

    <!-- ==================== Prepare Target ================================== -->

    <target name="prepare" depends="install-ivy">

        <!-- Create build directories as needed -->
        <mkdir  dir="${build.home}"/>
        <mkdir  dir="${build.home}/WEB-INF"/>
        <mkdir  dir="${build.home}/WEB-INF/classes"/>

        <copy todir="${build.home}">
            <fileset dir="${web.home}"/>
        </copy>

        <mkdir  dir="${build.home}/WEB-INF/lib"/>

        <copy todir="${build.home}/WEB-INF" >
            <fileset dir="${web.home}/WEB-INF"  excludes="**/*.classes"/>
        </copy>
    </target>

    <path id="compile.classpath">
        <fileset dir="${build.home}/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="src"/>
    </path>

    <target name="all" depends="clean,compile"
            description="Clean build and dist directories, then compile"/>

    <target name="clean"
            description="Delete old build and dist directories">
        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>
    </target>

    <target name="compile" depends="prepare, resolve">
        <mkdir dir="${build.home}/WEB-INF/classes"/>
        <javac srcdir="${src.home}"
               destdir="${build.home}/WEB-INF/classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               optimize="${compile.optimize}"
               includeantruntime="false">

            <classpath refid="compile.classpath"/>
            <compilerarg  value="-Xlint:unchecked" />
        </javac>

        <!-- Copy application resources -->
        <copy  todir="${build.home}/WEB-INF/classes">
            <fileset dir="src" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="dist" depends="compile">
        <mkdir dir="${dist.home}"/>

        <jar jarfile="${dist.home}/${migrate}.war" basedir="${build.home}"/>
        <jar jarfile="${dist.home}/${migrate}-model.jar">
            <fileset dir="${build.web-inf.classes}" includes="**/model/*.class"/>
            <fileset dir="${build.web-inf.classes}" includes="com/migrate/storage/impl/JsonHelper.class"/>
        </jar>
    </target>
</project>
